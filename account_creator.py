import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import time
import random
import string
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager
import re
from selenium.webdriver.common.keys import Keys
import pyautogui
import pyperclip

class AccountCreatorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Filmora Credit Farm - Account Creator")
        self.root.geometry("800x700")
        self.root.configure(bg='#2c3e50')
        
        # Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t vi·ªác d·ª´ng
        self.stop_flag = False
        self.is_running = False
        
        # T·∫°o giao di·ªán
        self.create_widgets()
        
    def create_widgets(self):
        # Frame ch√≠nh
        main_frame = tk.Frame(self.root, bg='#2c3e50', padx=20, pady=20)
        main_frame.pack(fill='both', expand=True)
        
        # Ti√™u ƒë·ªÅ
        title_label = tk.Label(main_frame, text="üé¨ FILMORA CREDIT FARM", 
                              font=('Arial', 24, 'bold'), 
                              fg='#e74c3c', bg='#2c3e50')
        title_label.pack(pady=(0, 30))
        
        # Frame c·∫•u h√¨nh
        config_frame = tk.LabelFrame(main_frame, text="C·∫•u H√¨nh", 
                                   font=('Arial', 12, 'bold'),
                                   fg='#ecf0f1', bg='#34495e', 
                                   relief='raised', bd=2)
        config_frame.pack(fill='x', pady=(0, 20))
        
        # Li√™n k·∫øt m·ªùi
        link_frame = tk.Frame(config_frame, bg='#34495e')
        link_frame.pack(fill='x', padx=15, pady=10)
        
        tk.Label(link_frame, text="üîó Li√™n k·∫øt m·ªùi:", 
                font=('Arial', 11, 'bold'), 
                fg='#ecf0f1', bg='#34495e').pack(anchor='w')
        
        self.link_entry = tk.Entry(link_frame, font=('Arial', 11), 
                                  width=80, relief='flat', bd=5)
        self.link_entry.pack(fill='x', pady=(5, 0))
        
        # S·ªë l∆∞·ª£ng account
        count_frame = tk.Frame(config_frame, bg='#34495e')
        count_frame.pack(fill='x', padx=15, pady=10)
        
        tk.Label(count_frame, text="üìä S·ªë account c·∫ßn t·∫°o:", 
                font=('Arial', 11, 'bold'), 
                fg='#ecf0f1', bg='#34495e').pack(anchor='w')
        
        self.count_var = tk.StringVar(value="1")
        count_spinbox = tk.Spinbox(count_frame, from_=1, to=100, 
                                  textvariable=self.count_var,
                                  font=('Arial', 11), width=10,
                                  relief='flat', bd=5)
        count_spinbox.pack(anchor='w', pady=(5, 0))
        
        # Frame ƒëi·ªÅu khi·ªÉn
        control_frame = tk.Frame(main_frame, bg='#2c3e50')
        control_frame.pack(fill='x', pady=(0, 20))
        
        # N√∫t th·ª±c hi·ªán
        self.start_button = tk.Button(control_frame, text="üöÄ B·∫ÆT ƒê·∫¶U TH·ª∞C HI·ªÜN", 
                                     font=('Arial', 12, 'bold'),
                                     bg='#27ae60', fg='white',
                                     relief='raised', bd=3,
                                     padx=20, pady=10,
                                     command=self.start_creation)
        self.start_button.pack(side='left', padx=(0, 10))
        
        # N√∫t d·ª´ng
        self.stop_button = tk.Button(control_frame, text="‚õî D·ª™NG", 
                                    font=('Arial', 12, 'bold'),
                                    bg='#e74c3c', fg='white',
                                    relief='raised', bd=3,
                                    padx=20, pady=10,
                                    command=self.stop_creation,
                                    state='disabled')
        self.stop_button.pack(side='left')
        
        # Frame th·ªëng k√™
        stats_frame = tk.LabelFrame(main_frame, text="Th·ªëng K√™", 
                                  font=('Arial', 12, 'bold'),
                                  fg='#ecf0f1', bg='#34495e',
                                  relief='raised', bd=2)
        stats_frame.pack(fill='x', pady=(0, 20))
        
        stats_inner = tk.Frame(stats_frame, bg='#34495e')
        stats_inner.pack(fill='x', padx=15, pady=10)
        
        # Th√†nh c√¥ng
        self.success_var = tk.StringVar(value="0")
        tk.Label(stats_inner, text="‚úÖ Th√†nh c√¥ng:", 
                font=('Arial', 11, 'bold'), 
                fg='#27ae60', bg='#34495e').pack(side='left')
        tk.Label(stats_inner, textvariable=self.success_var,
                font=('Arial', 11, 'bold'), 
                fg='#27ae60', bg='#34495e').pack(side='left', padx=(5, 20))
        
        # Th·∫•t b·∫°i
        self.failed_var = tk.StringVar(value="0")
        tk.Label(stats_inner, text="‚ùå Th·∫•t b·∫°i:", 
                font=('Arial', 11, 'bold'), 
                fg='#e74c3c', bg='#34495e').pack(side='left')
        tk.Label(stats_inner, textvariable=self.failed_var,
                font=('Arial', 11, 'bold'), 
                fg='#e74c3c', bg='#34495e').pack(side='left', padx=(5, 20))
        
        # ƒêi·ªÉm
        self.score_var = tk.StringVar(value="0")
        tk.Label(stats_inner, text="üèÜ ƒêi·ªÉm:", 
                font=('Arial', 11, 'bold'), 
                fg='#f39c12', bg='#34495e').pack(side='left')
        tk.Label(stats_inner, textvariable=self.score_var,
                font=('Arial', 11, 'bold'), 
                fg='#f39c12', bg='#34495e').pack(side='left', padx=(5, 0))
        
        # Khung log
        log_frame = tk.LabelFrame(main_frame, text="üìù Nh·∫≠t K√Ω Ho·∫°t ƒê·ªông", 
                                font=('Arial', 12, 'bold'),
                                fg='#ecf0f1', bg='#34495e',
                                relief='raised', bd=2)
        log_frame.pack(fill='both', expand=True)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, 
                                                font=('Consolas', 10),
                                                bg='#1e1e1e', fg='#00ff00',
                                                insertbackground='white',
                                                relief='flat', bd=5)
        self.log_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Log ban ƒë·∫ßu
        self.log("üéØ ·ª®ng d·ª•ng ƒë√£ s·∫µn s√†ng!")
        self.log("üí° Nh·∫≠p li√™n k·∫øt m·ªùi v√† s·ªë account c·∫ßn t·∫°o, sau ƒë√≥ nh·∫•n 'B·∫ÆT ƒê·∫¶U TH·ª∞C HI·ªÜN'")
        
    def log(self, message):
        """Ghi log v·ªõi timestamp"""
        timestamp = time.strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        self.log_text.insert(tk.END, log_message)
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
    def generate_password(self, length=12):
        """T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n c√≥ √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng, 1 ch·ªØ hoa, 1 s·ªë"""
        import random
        import string
        
        if length < 3:
            length = 3  # T·ªëi thi·ªÉu ƒë·ªÉ c√≥ ƒë·ªß 1 th∆∞·ªùng, 1 hoa, 1 s·ªë
            
        # ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t 1 k√Ω t·ª± t·ª´ m·ªói lo·∫°i
        password = [
            random.choice(string.ascii_lowercase),  # 1 ch·ªØ th∆∞·ªùng
            random.choice(string.ascii_uppercase),  # 1 ch·ªØ hoa  
            random.choice(string.digits)            # 1 s·ªë
        ]
        
        # ƒêi·ªÅn ph·∫ßn c√≤n l·∫°i b·∫±ng k√Ω t·ª± ng·∫´u nhi√™n
        remaining_length = length - 3
        all_characters = string.ascii_letters + string.digits
        
        for _ in range(remaining_length):
            password.append(random.choice(all_characters))
        
        # Tr·ªôn c√°c k√Ω t·ª± ƒë·ªÉ v·ªã tr√≠ ng·∫´u nhi√™n
        random.shuffle(password)
        
        return ''.join(password)

    def setup_driver(self):
        """Thi·∫øt l·∫≠p Chrome driver v·ªõi ch·∫ø ƒë·ªô ·∫©n danh"""
        try:
            self.log("üîß ƒêang thi·∫øt l·∫≠p ChromeDriver...")
            
            chrome_options = Options()
            chrome_options.add_argument("--incognito")
            chrome_options.add_argument("--disable-blink-features=AutomationControlled")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument("--disable-web-security")
            chrome_options.add_argument("--allow-running-insecure-content")
            chrome_options.add_argument("--disable-features=VizDisplayCompositor")
            chrome_options.add_argument("--disable-logging")
            chrome_options.add_argument("--disable-dev-tools")
            chrome_options.add_argument("--disable-background-timer-throttling")
            chrome_options.add_argument("--disable-backgrounding-occluded-windows")
            chrome_options.add_argument("--disable-renderer-backgrounding")
            chrome_options.add_argument("--disable-features=TranslateUI")
            chrome_options.add_argument("--disable-ipc-flooding-protection")
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)

            # Th√™m user agent ƒë·ªÉ tr√°nh b·ªã ph√°t hi·ªán
            chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            
            driver = None
            
            # C√°ch 1: Th·ª≠ v·ªõi executable_path tr·ª±c ti·∫øp
            try:
                self.log("üîÑ ƒêang s·ª≠ d·ª•ng ChromeDriver c√≥ s·∫µn...")
                driver = webdriver.Chrome(options=chrome_options)
                self.log("‚úÖ Th√†nh c√¥ng!")
            except Exception as e1:
                self.log(f"‚ö†Ô∏è ChromeDriver c√≥ s·∫µn th·∫•t b·∫°i: {str(e1)}")
                
                # C√°ch 2: Force download l·∫°i ChromeDriver
                try:
                    self.log("üîÑ ƒêang t·∫£i l·∫°i ChromeDriver...")
                    import shutil
                    import os
                    
                    # X√≥a cache c·ªßa webdriver-manager
                    cache_path = os.path.expanduser("~/.wdm")
                    if os.path.exists(cache_path):
                        shutil.rmtree(cache_path)
                        self.log("üóëÔ∏è ƒê√£ x√≥a cache ChromeDriver")
                    
                    # T·∫£i l·∫°i ChromeDriver
                    service = Service(ChromeDriverManager().install())
                    driver = webdriver.Chrome(service=service, options=chrome_options)
                    self.log("‚úÖ T·∫£i l·∫°i th√†nh c√¥ng!")
                except Exception as e2:
                    self.log(f"‚ùå T·∫•t c·∫£ c√°ch ƒë·ªÅu th·∫•t b·∫°i!")
                    self.log(f"L·ªói chi ti·∫øt: {str(e2)}")
                    raise Exception(f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o ChromeDriver. Vui l√≤ng ki·ªÉm tra:\n1. Chrome browser ƒë√£ c√†i ƒë·∫∑t ch∆∞a\n2. C·∫≠p nh·∫≠t Chrome l√™n phi√™n b·∫£n m·ªõi nh·∫•t\n3. Restart m√°y t√≠nh")
            
            if driver:
                driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
                self.log("‚úÖ ChromeDriver ƒë√£ s·∫µn s√†ng!")
                return driver
            else:
                raise Exception("Kh√¥ng th·ªÉ t·∫°o ChromeDriver")
                
        except Exception as e:
            self.log(f"‚ùå L·ªói khi thi·∫øt l·∫≠p ChromeDriver: {str(e)}")
            raise e
        
    def create_single_account(self, invite_link, account_num):
        """T·∫°o m·ªôt t√†i kho·∫£n duy nh·∫•t"""
        driver = None
        try:
            self.log(f"üîÑ B·∫Øt ƒë·∫ßu t·∫°o account #{account_num}")
            
            # Thi·∫øt l·∫≠p driver
            driver = self.setup_driver()
            wait = WebDriverWait(driver, 15)
            
            # B∆∞·ªõc 1: V√†o mail.tm ƒë·ªÉ l·∫•y email
            self.log(f"üìß ƒêang l·∫•y email t·∫°m th·ªùi...")
            driver.get("https://mail.tm/vi/")
            time.sleep(5)
            
            # L·∫•y email
            email_input = wait.until(EC.presence_of_element_located((By.XPATH, "/html/body/div[1]/div/div[2]/div/div/div[1]/div/div/input")))
            email = email_input.get_attribute("value")
            self.log(f"‚úÖ Email nh·∫≠n ƒë∆∞·ª£c: {email}")
            
            # Copy email v√†o clipboard
            pyperclip.copy(email)
            self.log(f"üìã ƒê√£ copy email v√†o clipboard")
            
            # B∆∞·ªõc 2: M·ªü link m·ªùi v√† k√≠ch ho·∫°t popup
            self.log(f"üîó ƒêang m·ªü li√™n k·∫øt m·ªùi...")
            driver.execute_script(f"window.open('{invite_link}', '_blank');")
            wait.until(lambda d: len(d.window_handles) == 2)
            driver.switch_to.window(driver.window_handles[1])
            
            time.sleep(1)
            self.log(f"üìÑ Trang ƒë√£ load, ƒëang k√≠ch ho·∫°t popup ƒëƒÉng k√Ω...")
            
            # Scroll l√™n ƒë·∫ßu trang v√† focus
            driver.execute_script("window.scrollTo(0, 0);")
            driver.execute_script("document.body.focus();")
            time.sleep(0.5)
            
            # B·∫•m Tab 12 l·∫ßn ƒë·ªÉ t·ªõi n√∫t Sign Up Now
            self.log(f"üéπ B·∫•m Tab 12 l·∫ßn ƒë·ªÉ t·ªõi n√∫t Sign Up Now...")
            for i in range(12):
                pyautogui.press('tab')
                time.sleep(0.1)
            
            # B·∫•m Enter ƒë·ªÉ m·ªü popup
            self.log(f"üéπ B·∫•m Enter ƒë·ªÉ m·ªü popup ƒëƒÉng k√Ω...")
            pyautogui.press('enter')
            time.sleep(1)
            
            # Ki·ªÉm tra popup ƒë√£ m·ªü
            iframe_found = driver.find_elements(By.XPATH, "//iframe[contains(@src, 'accounts.wondershare.com')]")
            if iframe_found:
                self.log(f"‚úÖ Popup ƒëƒÉng k√Ω ƒë√£ m·ªü th√†nh c√¥ng!")
            else:
                self.log(f"‚ùå Popup ch∆∞a m·ªü, th·ª≠ ti·∫øp t·ª•c...")
            
            # B∆∞·ªõc 3: ƒêi·ªÅn th√¥ng tin ƒëƒÉng k√Ω b·∫±ng Tab
            self.log(f"üìù ƒêang ƒëi·ªÅn th√¥ng tin ƒëƒÉng k√Ω...")
            
            # Tab 6 l·∫ßn ƒë·∫øn tr∆∞·ªùng email
            for i in range(6):
                pyautogui.press('tab')
                time.sleep(0.1)
            
            # D√°n email
            self.log(f"üìß D√°n email: {email}")
            pyautogui.hotkey('ctrl', 'v')
            
            # Tab 1 l·∫ßn ƒë·∫øn tr∆∞·ªùng password
            pyautogui.press('tab')
            time.sleep(0.1)
            
            # T·∫°o v√† d√°n m·∫≠t kh·∫©u
            password = self.generate_password()
            pyperclip.copy(password)
            self.log(f"üîê D√°n m·∫≠t kh·∫©u: {password}")
            pyautogui.hotkey('ctrl', 'v')
            
            # Tab 1 l·∫ßn ƒë·∫øn n√∫t t·∫°o t√†i kho·∫£n v√† Enter
            pyautogui.press('tab')
            time.sleep(0.1)
            pyautogui.press('enter')
            
            self.log(f"‚úÖ ƒê√£ ho√†n th√†nh ƒëi·ªÅn form ƒëƒÉng k√Ω")
            time.sleep(1)
            
            # B∆∞·ªõc 4: Quay l·∫°i email ƒë·ªÉ l·∫•y m√£ x√°c nh·∫≠n
            self.log(f"üì¨ ƒêang l·∫•y m√£ x√°c nh·∫≠n t·ª´ email...")
            driver.switch_to.default_content()
            driver.switch_to.window(driver.window_handles[0])
            
            # L·∫•y m√£ x√°c nh·∫≠n
            verification_code = None
            max_retries = 6
            email_clicked = False
            
            for retry in range(max_retries):
                try:
                    self.log(f"üîÑ L·∫ßn th·ª≠ {retry + 1}/{max_retries} - ƒêang ki·ªÉm tra email...")
                    
                    if not email_clicked:
                        driver.refresh()
                        time.sleep(2)
                    
                    # Th·ª≠ l·∫•y m√£ t·ª´ preview tr∆∞·ªõc
                    try:
                        preview_element = driver.find_element(By.XPATH, "/html/body/div[1]/div/div[2]/main/div[2]/div[2]/ul/li/a/div/div/div[2]/div[2]/div/div[2]")
                        preview_text = preview_element.text.strip()
                        self.log(f"üìÑ Preview email: {preview_text}")
                        
                        if "verification code is:" in preview_text.lower():
                            code_patterns = [
                                r'verification code is:\s*(\d{4,8})',
                                r'code is:\s*(\d{4,8})',
                                r':\s*(\d{6})',
                                r'\b(\d{6})\b',
                                r'\b(\d{5})\b',
                                r'\b(\d{4})\b'
                            ]
                            
                            for pattern in code_patterns:
                                code_match = re.search(pattern, preview_text, re.IGNORECASE)
                                if code_match:
                                    verification_code = code_match.group(1) if code_match.groups() else code_match.group()
                                    self.log(f"üî¢ M√£ x√°c nh·∫≠n: {verification_code}")
                                    break
                            
                            if verification_code:
                                break
                    except NoSuchElementException:
                        pass
                    
                    # N·∫øu ch∆∞a c√≥ m√£, click v√†o email
                    if not verification_code and not email_clicked:
                        email_selectors = [
                            "/html/body/div[1]/div/div[2]/main/div[2]/div[2]/ul/li/a/div",
                            "//div[contains(@class, 'email-item')]//a",
                            "//li[contains(@class, 'email')]//a",
                            "//a[contains(@href, 'message')]"
                        ]
                        
                        email_link = None
                        for selector in email_selectors:
                            try:
                                email_link = driver.find_element(By.XPATH, selector)
                                break
                            except NoSuchElementException:
                                continue
                        
                        if email_link:
                            email_link.click()
                            email_clicked = True
                            time.sleep(1)
                            self.log(f"‚úÖ ƒê√£ click v√†o email")
                        else:
                            time.sleep(10)
                            continue
                    
                    # T√¨m m√£ trong n·ªôi dung email chi ti·∫øt
                    if not verification_code and email_clicked:
                        verification_selectors = [
                            "/html/body/p/span/table/tbody/tr/td/table/tbody/tr[2]/td/div[2]",
                            "//div[contains(@class, 'verification-code')]",
                            "//td[contains(text(), 'verification') or contains(text(), 'code')]",
                            "//p[contains(text(), 'code') or contains(text(), 'verification')]",
                            "//*[contains(text(), '6')]"
                        ]
                        
                        verification_element = None
                        for selector in verification_selectors:
                            try:
                                verification_element = driver.find_element(By.XPATH, selector)
                                break
                            except NoSuchElementException:
                                continue
                        
                        if verification_element:
                            verification_text = verification_element.text.strip()
                            self.log(f"üìÑ N·ªôi dung email: {verification_text}")
                            
                            code_patterns = [r'\b\d{6}\b', r'\b\d{5}\b', r'\b\d{4}\b']
                            for pattern in code_patterns:
                                code_match = re.search(pattern, verification_text)
                                if code_match:
                                    verification_code = code_match.group()
                                    self.log(f"üî¢ M√£ x√°c nh·∫≠n: {verification_code}")
                                    break
                            
                            if verification_code:
                                break
                        else:
                            if email_clicked and retry < max_retries - 1:
                                driver.refresh()
                                time.sleep(3)
                                email_clicked = False
                    
                except Exception as e:
                    self.log(f"‚ö†Ô∏è L·ªói l·∫ßn {retry + 1}: {str(e)}")
                    email_clicked = False
                    time.sleep(10)
            
            if not verification_code:
                self.log(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c m√£ x√°c nh·∫≠n")
                return False
            
            # B∆∞·ªõc 5: Nh·∫≠p m√£ x√°c nh·∫≠n
            self.log(f"üîÑ ƒêang nh·∫≠p m√£ x√°c nh·∫≠n...")
            driver.switch_to.window(driver.window_handles[1])
            time.sleep(2)
            
            # Chuy·ªÉn v√†o iframe n·∫øu c√≥
            try:
                iframe = driver.find_element(By.XPATH, "//iframe[contains(@src, 'accounts.wondershare.com')]")
                driver.switch_to.frame(iframe)
                self.log(f"‚úÖ ƒê√£ chuy·ªÉn v√†o iframe")
            except:
                pass
            
            # Nh·∫≠p m√£ b·∫±ng Tab v√† Ctrl+V
            pyperclip.copy(verification_code)
            
            # Tab 1 l·∫ßn ƒë·∫øn tr∆∞·ªùng m√£ x√°c nh·∫≠n
            pyautogui.press('tab')
            time.sleep(0.1)
            
            # D√°n m√£ x√°c nh·∫≠n
            self.log(f"üìù D√°n m√£ x√°c nh·∫≠n: {verification_code}")
            pyautogui.hotkey('ctrl', 'v')
            time.sleep(0.1)
            
            # Tab ƒë·∫øn n√∫t x√°c nh·∫≠n v√† Enter
            for i in range(6):
                pyautogui.press('tab')
                time.sleep(0.1)
            pyautogui.press('enter')
            
            self.log(f"‚úÖ ƒê√£ ho√†n th√†nh nh·∫≠p m√£ x√°c nh·∫≠n")
            
            # ƒê·ª£i 5 gi√¢y r·ªìi t·∫Øt tr√¨nh duy·ªát
            self.log(f"‚è≥ ƒê·ª£i 2 gi√¢y r·ªìi t·∫Øt tr√¨nh duy·ªát...")
            time.sleep(2)
            
            self.log(f"üéâ Account #{account_num} ho√†n th√†nh! ƒêang t·∫Øt tr√¨nh duy·ªát...")
            return True
                
        except Exception as e:
            self.log(f"‚ùå L·ªói t·∫°o account #{account_num}: {str(e)}")
            return False
            
        finally:
            if driver:
                driver.quit()
                self.log(f"üîß ƒê√£ t·∫Øt tr√¨nh duy·ªát cho account #{account_num}")
                
    def start_creation(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o account"""
        if self.is_running:
            return
            
        invite_link = self.link_entry.get().strip()
        if not invite_link:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p li√™n k·∫øt m·ªùi!")
            return
            
        try:
            account_count = int(self.count_var.get())
        except ValueError:
            messagebox.showerror("L·ªói", "S·ªë l∆∞·ª£ng account kh√¥ng h·ª£p l·ªá!")
            return
            
        self.is_running = True
        self.stop_flag = False
        self.start_button.config(state='disabled')
        self.stop_button.config(state='normal')
        
        # Reset th·ªëng k√™
        self.success_var.set("0")
        self.failed_var.set("0")
        self.score_var.set("0")
        
        # Ch·∫°y trong thread ri√™ng
        thread = threading.Thread(target=self.creation_worker, args=(invite_link, account_count))
        thread.daemon = True
        thread.start()
        
    def creation_worker(self, invite_link, account_count):
        """Worker thread ƒë·ªÉ t·∫°o account"""
        success_count = 0
        failed_count = 0
        
        self.log(f"üöÄ B·∫Øt ƒë·∫ßu t·∫°o {account_count} account...")
        
        for i in range(1, account_count + 1):
            if self.stop_flag:
                self.log("‚õî ƒê√£ d·ª´ng theo y√™u c·∫ßu ng∆∞·ªùi d√πng")
                break
                
            success = self.create_single_account(invite_link, i)
            
            if success:
                success_count += 1
                score = success_count * 100
                self.success_var.set(str(success_count))
                self.score_var.set(f"{score} ƒëi·ªÉm")
                self.log(f"üèÜ ƒêi·ªÉm hi·ªán t·∫°i: {score}")
            else:
                failed_count += 1
                self.failed_var.set(str(failed_count))
                
            # Ngh·ªâ gi·ªØa c√°c l·∫ßn t·∫°o
            if i < account_count and not self.stop_flag:
                self.log(f"‚è≥ Ngh·ªâ 1 gi√¢y tr∆∞·ªõc khi t·∫°o account ti·∫øp theo...")
                time.sleep(1)
                
        # Ho√†n th√†nh
        self.log(f"üèÅ Ho√†n th√†nh! Th√†nh c√¥ng: {success_count}/{account_count}")
        self.log(f"üèÜ T·ªïng ƒëi·ªÉm ƒë·∫°t ƒë∆∞·ª£c: {success_count * 100} ƒëi·ªÉm")
        
        self.is_running = False
        self.start_button.config(state='normal')
        self.stop_button.config(state='disabled')
        
    def stop_creation(self):
        """D·ª´ng qu√° tr√¨nh t·∫°o account"""
        self.stop_flag = True
        self.log("‚ö†Ô∏è ƒêang d·ª´ng...")

def main():
    root = tk.Tk()
    app = AccountCreatorApp(root)
    root.mainloop()

if __name__ == "__main__":
    main() 